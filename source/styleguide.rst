.. _styleguide:

Python 代码编程规范
===================================

如果想要别人看你的代码时，面露微笑，而不是难色。那就看看这些 Python 编程规范吧。规范了自己，才能规范别人。

目前，有两份 Python 编程规范比较被人认可，一份是 Python 官方的 PEP 8 风格指南，一份是互联网谷歌公司的风格指南。

.. 另外，我还提供了一份个人风格指南，希望可以成为公司的 Python 编程规范。

谷歌风格指南
--------------------------

谷歌推出了一份 Python 代码的风格指南，原文请参见 `这里 <https://google.github.io/styleguide/pyguide.html>`_，中文翻译版请参见 `这里 <https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/>`_。


PEP 8 风格指南
---------------------------

PEP 的全称是 Python Enhancement Proposals，PEP 8 这个提案是关于 Python 代码风格的官方指南，原文在 `这里 <https://www.python.org/dev/peps/pep-0008/>`_，下面是一些总结，具体的例子请参加原文。

1. 尽信书则不如无书，代码风格并不是一定要遵守，在保证代码可读性的基础上，去满足代码风格。

2. 用 4 个空格进行缩进，同时利用括号、方括号、大括号或者悬挂缩进来对齐包裹其中的元素。

3. 代码行最多包含 79 个字符，注释内容和文档字符串每行最多包含 72 个字符。有时可以使用反斜杠符 ``\`` 来连接超长的 with 语句和 assert 语句。

4. 在二元操作符(比如：+、-、\*、/等)的前面断行，而不是后面，使用 ``a \n + b`` ，而不是  ``a + \n b`` 。

5. 用 2 个空行包围定义在 Python 文件里的函数和类，用 1 个空行包围定义在类里的方法，空行的数量可以根据需要进行增加或者删减。

4. 每行只导入一个 Python 库，但可以在一行导入同一个 Python 库的多个模块；import 语句应该统一放置在 Python 文件的最开头，放在模块注释和文档后面，同时在全局变量和常量之前；import 语句应该按照 标准库 -> 第三方库 -> 本地库的顺序排列，并用空行进行分割；尽量避免使用 ``from <module> import *``。

5. Python 模块级别的双下划线变量（比如：``__all__``、``__author__``、``__version__``)应该放在模块字符串和 ``from __future__ import`` 语句的后面，同时放在普通 ``import`` 语句的前面。

6. 单引号字符和双引号字符是一样的，可以替换着使用；使用三个双引号来引用文档字符串。

7. 合理使用空格，避免在圆括号、中括号、大括号、逗号、分号、冒号、等号的周围使用多余的空格；在适当第二元操作符周围加上一个合适的空格。

8. 一个元素的元组应该保留一个尾随逗号，列表或者参数以每一行的方式扩展时，需要保留一个尾随逗号。

9. 及时更新注释，注释的开头第一个字母大写。


.. 个人风格指南
.. ---------------------------
